blueprint:
  name: Philips Tap Dial Switch
  description: |
    Control lights with a Philips Hue Tap Switch.
    Use the four buttons to control up to four light(s) with an on/off toggle. The dial can be used to dim the most recently used light.

    This blueprint is based on [apollo1220's work](https://github.com/apollo1220/blueprints/blob/main/philips_zigbee_dial.yaml).
  domain: automation
  input:
    remote:
      name: Philips Hue Tap Switch
      selector:
        device:
          integration: zha
          manufacturer: Signify Netherlands B.V.
          model: RDM002
    first_light:
      name: First Light
      description: The light(s) to control with first button
      selector:
        target:
          entity: {}
    second_light:
      name: (OPTIONAL) Second Light
      description: The light(s) to control with second button
      default: {}
      selector:
        target:
          entity: {}
    third_light:
      name: (OPTIONAL) Third Light
      description: The light(s) to control with third button
      default: {}
      selector:
        target:
          entity: {}
    fourth_light:
      name: (OPTIONAL) Fourth Light
      description: The light(s) to control with fourth button
      default: {}
      selector:
        target:
          entity: {}
    dimmer_light:
      name: Dimmer Light
      description: >
        The light(s) to control with the dimmer. If unspecified, dimms
        the light last controlled via buttons.
      default: {}
      selector:
        target:
          entity: {}
    current_light:
      name: (OPTIONAL) Current Light
      description: >
        Text helper to track the current light to dim. Set for the
        dimmer controls to change which light they are controlling
        according to the last one turned on.

        Used when Dimmer Light is not set. If both are not set, alway
        dimms First Light.
      default:
      selector:
        entity:
          domain: input_text
    dim_scale:
      name: Diming Scale
      description: Scale factor for the dimming. This value will be multiplied by the value given from the dial. So lower number, more gradual dimming. Larger number, faster dimming.
      default: 1.0
      selector:
        number:
          min: 0.0
          max: 5.0
          step: 0.01
    transition_time:
      name: Transition Time
      description: Number of seconds to transition to target brightness when using dimmer.
      default: 0.5
      selector:
        number:
          min: 0.0
          max: 5.0
          step: 0.01
  source_url: https://github.com/fholzer/home-assistant-blueprints/blob/main/philips_zigbee_dial.yaml
mode: restart
max_exceeded: silent
variables:
  default_light: "first_light"
  current_light: !input "current_light"
  dimmer_light: !input "dimmer_light"
  dim_scale: !input "dim_scale"
  transition_time: !input "transition_time"
  lights:
    first_light: !input "first_light"
    second_light: !input "second_light"
    third_light: !input "third_light"
    fourth_light: !input "fourth_light"
trigger:
  - platform: event
    event_type: zha_event
    event_data:
      device_id: !input "remote"
action:
  - variables:
      command: "{{ trigger.event.data.command }}"
      args: "{{ trigger.event.data.args }}"
      params: "{{ trigger.event.data.params }}"
      scene: "{{ trigger.event.data.params.scene_id | default('') }}"
      step_mode: "{{ trigger.event.data.params.step_mode | default('') }}"
      step_size: "{{ trigger.event.data.params.step_size | default(0) }}"
  - choose:
      - conditions:
          - "{{ command == 'recall' }}"
          - "{{ scene == 1 }}"
        sequence:
          - parallel:
              - service: homeassistant.toggle
                target: !input "first_light"
              - choose:
                  - conditions: "{{ current_light != none }}"
                    sequence:
                      - service: input_text.set_value
                        target:
                          entity_id: !input "current_light"
                        data:
                          value: first_light
      - conditions:
          - "{{ command == 'recall' }}"
          - "{{ lights.second_light != none }}"
          - "{{ scene == 0 }}"
        sequence:
          - parallel:
              - service: homeassistant.toggle
                target: !input "second_light"
              - choose:
                  - conditions: "{{ current_light != none }}"
                    sequence:
                      - service: input_text.set_value
                        target:
                          entity_id: !input "current_light"
                        data:
                          value: second_light
      - conditions:
          - "{{ command == 'recall' }}"
          - "{{ lights.third_light != none }}"
          - "{{ scene == 5 }}"
        sequence:
          - parallel:
              - service: homeassistant.toggle
                target: !input "third_light"
              - choose:
                  - conditions: "{{ current_light != none }}"
                    sequence:
                      - service: input_text.set_value
                        target:
                          entity_id: !input "current_light"
                        data:
                          value: third_light
      - conditions:
          - "{{ command == 'recall' }}"
          - "{{ lights.fourth_light != none }}"
          - "{{ scene == 4 }}"
        sequence:
          - parallel:
              - service: homeassistant.toggle
                target: !input "fourth_light"
              - choose:
                  - conditions: "{{ current_light != none }}"
                    sequence:
                      - service: input_text.set_value
                        target:
                          entity_id: !input "current_light"
                        data:
                          value: fourth_light
      - conditions:
          - "{{ command == 'step_with_on_off' }}"
          - "{{ step_mode == 'StepMode.Up' }}"
        sequence:
          - service: light.turn_on
            target: "{{ (dimmer_light | default(false)) or lights[(states(current_light) | default(False)) or default_light] }}"
            data:
              brightness_step_pct: "{{ step_size * dim_scale }}"
              transition: "{{ transition_time }}"
      - conditions:
          - "{{ command == 'step_with_on_off' }}"
          - "{{ step_mode == 'StepMode.Down' }}"
        sequence:
          - service: light.turn_on
            target: "{{ (dimmer_light | default(false)) or lights[(states(current_light) | default(False)) or default_light] }}"
            data:
              brightness_step_pct: "{{ -step_size * dim_scale }}"
              transition: "{{ transition_time }}"
